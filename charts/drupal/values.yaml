global:
  storageClass: "azurefile-premium"
  project: "drupal"
  environment: "production"

imagePullPolicy: "Always"
imagePullSecret: "drupal-acr-cred"
drupalImage: "drupalcr.azurecr.io/brainsum/drupal-app:latest"
nginxImage: "drupalcr.azurecr.io/brainsum/drupal-nginx:latest"

# Setting this to "true" adds a timestamp annotation with the current date.
annotateDeployment: false

#
# @todo: Rewrite env vars. We need common, drupal, frontend ones and merge them properly.
# @todo: Rewrite volumes and mounts. We need common, drupal, frontend ones and merge them properly.
#

# Enable and configure if you want to have a separate deployment and ingress for user-facing and admin-facing parts of the app.
# E.g. www.mysite.com and admin.mysite.com.
# This can be useful if your frontend can live with 128Mb of RAM, but admin can eat up 2Gb or more.
dedicatedFrontend:
  enable: false
  ingress:
    host: "www.mysite.com"
    # Additional hosts where the app should be available.
    additionalHosts: []
#      - www.mysite.net
    # Additional hosts that should be redirected to dedicatedFrontend.ingress.host.
    redirectedHosts: []
#      - mysite.com
    tlsSecret: "frontend-mysite-tls-secret"
    sslRedirect: false
    requestTimeout: 180
    certManager:
      enable: false
      issuer: 'letsencrypt'
      challengeType: 'http01'
    # These paths should be redirected to the admin part.
    # @note, the redirect logic only supports .ingress.host, not additionalHosts.
    redirectorImage: library/nginx
    redirectorImageTag: 1.21.1-alpine
    redirectedPaths: []
    # These should be disabled altogether.
    # @note, the block logic only supports ingress.host, not additionalHosts.
    blockerImage: library/nginx
    blockerImageTag: 1.21.1-alpine
    blockedPaths: []
#    # @note, additionalPaths and additionalHosts are not fully tested.
    additionalPaths: []
#      - path: /
#        pathType: Prefix
#        backend:
#          service:
#            name: another-service
#            port:
#              name: http

  resources:
    drupalCpuRequest: "10m"
    drupalMemoryRequest: "32Mi"
    drupalCpuLimit: "800m"
    drupalMemoryLimit: "512Mi"
    nginxCpuRequest: "10m"
    nginxMemoryRequest: "32Mi"
    nginxCpuLimit: "200m"
    nginxMemoryLimit: "128Mi"
  scaling:
    useAutoscaler: true
    minReplicas: 1
    maxReplicas: 10
  drupalExtraEnvVars: []
  nginxExtraEnvVars: []
  tolerations: []
  nodeSelector: {}

appTolerations: []
appNodeSelector: {}

ingress:
  host: "mysite.com"
  tlsSecret: "mysite-tls-secret"
  sslRedirect: false
  requestTimeout: 60
  additionalPaths: []
#    - path: /
#      pathType: Prefix
#      backend:
#        service:
#          name: another-service
#          port:
#            name: http
  additionalHosts: []
#    - www.mysite.com
#    - mysite.net
#  useCertManager: true
#  certManagerIssuer: 'letsencrypt'
#  certManagerChallengeType: 'http01'

# This is useful for disallowing robots access for e.g. a dev site.
robotsOverride:
  enable: true
  existingConfig: ""

appDatabaseHost: "drupal-database-mariadb.drupal.svc.cluster.local"

#
# @todo: Making probes optional would be a good idea.
#

#drupalStartupProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 5
#  exec:
#    command:
#      - /usr/local/bin/php-fpm-healthcheck
#drupalLivenessProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 5
#  exec:
#    command:
#      - /usr/local/bin/php-fpm-healthcheck
#drupalReadinessProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 5
#  exec:
#    command:
#      - /usr/local/bin/php-fpm-healthcheck

#nginxStartupProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 8
#  exec:
#    command:
#      - /usr/bin/curl
#      - 127.0.0.1:9002/ping
#nginxLivenessProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 8
#  exec:
#    command:
#      - /usr/bin/curl
#      - 127.0.0.1:9002/ping
#nginxReadinessProbe:
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 8
#  exec:
#    command:
#      - /usr/bin/curl
#      - 127.0.0.1:9002/ping

#drupalFpmPort: 9000
#drupalFpmHealthPort: 9001

# Allows setting the port for nginx. It's recommended to use non-root containers which can only bind higher numbered ports.
#nginxTargetPort: 8080
#nginxHealthPort: 9002

#nginxHealthPath: /ping

#jobCpuRequest: "10m"
#jobMemoryRequest: "32Mi"
#jobCpuLimit: "1000m"
#jobMemoryLimit: "2048Mi"

#drupalCpuRequest: "10m"
#drupalMemoryRequest: "32Mi"
#drupalCpuLimit: "800m"
#drupalMemoryLimit: "512Mi"

#nginxCpuRequest: "10m"
#nginxMemoryRequest: "32Mi"
#nginxCpuLimit: "200m"
#nginxMemoryLimit: "128Mi"

# What should go into cron, results in "bash -c commandArg".
#drupalCronJob:
#  commandArg: "drush cron && drush node-access-rebuild-progressive:rebuild"

# What should go into post upgrade, results in "bash -c commandArg".
#drupalDeployJob:
#  commandArg: "drush deploy && (drush twigc || true) && (drush warmer:enqueue --run-queue || true)"

# @todo: Add these:
# An object with job name suffixes as the key and cron schedule as the value. Also changes the saved filename with this as the prefix.
# Note, this is only for simple db backups. There's also no logrotate or retention policy.
#automatedDbBackups:
#  daily: "0 1 * * *"
#  weekly: "0 2 * * 6"
#  monthly: "0 3 1 * *"

appStorage:
  class: "drupal-storage"
  size: "5Gi"

backupStorage:
  class: "drupal-storage"
  size: "5Gi"

gracefulUpdate:
  preStopTimeout: 60
  terminationGracePeriodSeconds: 70
  connectionDrainTimeout: 30

rollback:
  backupVersion: "latest"

drupalSettingsDir: "/var/www/html/settings"
drupalExtraEnvVars: []
drupalExtraSettings:
  volumes:
    - name: email-settings
      secret:
        secretName: drupal-production-app-settings
        items:
          - key: settings.email.php
            path: settings.email.php
  mounts:
    - name: email-settings
      mountPath: /var/www/html/settings/settings.email.php
      subPath: settings.email.php
      readOnly: true

jobExtraEnvVars: []
nginxExtraEnvVars: []

trustedHosts:
  enable: false
  existingConfig: ""
  # @note: Additional hosts only works if existingConfig is not set.
  additionalHosts: []
#    - 'localhost'
#    - 'drupal.docker.localhost'

sessionOverride:
  enable: false
  existingConfig: ""
  cookieDomain: ".example.com"
  # Set session cookie lifetime (in seconds), i.e. the time from the session
  # is created to the cookie expires, i.e. when the browser is expected to
  # discard the cookie. The value 0 means "until the browser is closed".
  cookieLifetime: 2000000
  # Set session lifetime (in seconds), i.e. the time from the user's last
  # visit to the active session may be deleted by the session garbage
  # collector. When a session is deleted, authenticated users are logged out,
  # and the contents of the user's $_SESSION variable is discarded.
  gcMaxLifetime: 200000

solr:
  enable: false
  # When existingConfig is used, host and core are ignored.
  existingConfig: ""
  host: "solr-solrcloud-headless.drupal.svc.cluster.local"
  core: "dislaw-solr-collection"

  tikaHost: "tika-server.drupal.svc.cluster.local"

  # When existingSecret is used, username and password are ignored.
  authenticate: false
  existingSecret: ""
  username: ""
  password: ""

# @todo: Add to templates + env.
# @todo: Use configmap/secret instead vs allow using custom ones.
redis:
  enable: false
  # When existingConfig is used, host is ignored.
  existingConfig: ""
  host: "drupal-cache-redis-master.drupal.svc.cluster.local"

  # When existingSecret is used, password is ignored.
  authenticate: false
  existingSecret: ""
  password: ""
